server:
  port: 8989
spring:
  application:
    name: GATEWAY-SERVICE
  config:
    import: "optional:configserver:"
#  security:
#    oauth2:
#      client:
#        registration:
#          keycloak:
#            client-id: oauth2-login
#            client-secret: 4d8a570b-defa-4e6a-a5d2-0d46387ff776
#            client-name: Keycloak
#            scope: openid,profile,email,roles,role
#        provider:
#          keycloak:
#            issuer-uri: http://localhost:8180/auth/realms/public-library
  cloud:
    config:
      uri:
        - http://localhost:9196
    gateway:
#      default-filters:
#        - SaveSession
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter.replenishRate: 10
#            redis-rate-limiter.burstCapacity: 20
#            redis-rate-limiter.requestedTokens: 1
#        - name: Retry
#          args:
#            retries: 3
#            methods: GET
#            series: SERVER_ERROR
#            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
#            backoff:
#              firstBackoff: 50ms
#              maxBackOff: 500ms
#              factor: 2
#              basedOnPreviousValue: false
      routes:
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order/**
          filters:
            - name: CircuitBreaker
              args:
                name: order-service
                fallbackuri: forward:/orderFallBack
        #            - name: TokenRelay
        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/payment/**
          filters:
            - name: CircuitBreaker
              args:
                name: payment-service
                fallbackuri: forward:/paymentFallback
#            - name: TokenRelay
#  lifecycle:
#    timeout-per-shutdown-phase: 20s
#  redis:
#    connect-timeout: 30s
#    host: localhost
#    port: 6379
#    timeout: 500ms
#  session:
#    store-type: redis
#    timeout: 10m
#    redis:
#      namespace: library:edge

management:
  endpoints:
    web:
      exposure:
        include: health
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
#  retry:
#    instances:
#      userService:
#        maxRetryAttempts: 5
#        waitDuration: 10s
# use this with @Retry